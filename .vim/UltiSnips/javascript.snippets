# PURE JS

snippet const "Define constant" b
const $1 = $2;$0
endsnippet

snippet f "Anonymous function" w
function($2) {${3:
	$0
}}${1:;}
endsnippet

snippet = "Arrow function" i
${1:($2)} => ${3:{
	$0
}${4:;}}
endsnippet

snippet fun "Named function" w
function ${1:name}($2) {
	$0
}
endsnippet

snippet iife "IIFE"
(function() {
	${1:'use strict';
	}$0
}());
endsnippet

snippet if "if clause" b
if ($1) {
	$2
}$0
endsnippet

snippet else "else clause" w
else {
	$1
}$0
endsnippet

snippet elif "else if clause" w
else if ($1) {
	$2
}$0
endsnippet

snippet us "use strict" b
'use strict';$0
endsnippet

snippet sym "Private symbol" w
const _${1:name} = Symbol('$1');$0
endsnippet

snippet /** "JSDoc comment"
/**
 * $0
 */
endsnippet

snippet cla "class" w
class $1 ${2:extends ${3:Super }}{
	${4:constructor($5) {
		$0
	}}
}
endsnippet

snippet	req "require CommonJS module" w
const ${2:`!p
import re

updash = lambda m: m.group(1).upper()

out = t[1]
out = re.sub(r'gulp-(\S)', r'\1', out)
out = re.sub(r'-([a-z])', updash, out)

snip.rv = out
`} = require('$1');
endsnippet

# PROMISES

snippet prom "new Promise" w
new Promise(function(resolve, reject) {
	$0
})${1:;}
endsnippet

snippet .then "Promise .then handler" i
.then(${1:function($3) {
	$4
}})${2:;}$0
endsnippet

snippet .catch "Promise .catch handler" i
.catch(${1:function($3) {
	$4
}})${2:;}$0
endsnippet

# CONSOLE

snippet cl "console.log"
console.log($1);$0
endsnippet

snippet cd "console.dir"
console.dir($1);$0
endsnippet

# MOCHA

snippet it "Mocha spec" b
it('$1'${2:, function($3) {
	$0
}});
endsnippet

snippet ait "Async mocha spec" b
it('$1'${2:, masync(async function() {
	$0
})});
endsnippet

snippet be "Mocha beforeEach" b
beforeEach(function($1) {
	$0
});
endsnippet

snippet ae "Mocha afterEach" b
afterEach(function() {
	$0
});
endsnippet

snippet des "Mocha describe" b
describe('$1', function() {
	$0
});
endsnippet

snippet con "Mocha context" b
context('$1', function() {
	$0
});
endsnippet

snippet when "Mocha 'when' context" b
context('when $1', function() {
	$0
});
endsnippet

snippet with "Mocha 'with' context" b
context('with $1', function() {
	$0
});
endsnippet

# CHAI and pals

snippet ex "chai base expectation" w
expect($1).to${2:.eventually}${3:.not}${4:.deep}.${5:equal($6)};$0
endsnippet

snippet exc "chai expect invokation" w
expect($1).has.${2:not.}been.called${3:Once};$0
endsnippet

snippet exti "chai expect throw with inline function" w
expect(${1:function() {
	$0
}}).to.${2:not.}throw($3);
endsnippet

snippet ext "chai expect throw" b
function ${1:fn}() {
	$0
}
expect($1).to.${2:not.}throw($3);
endsnippet

snippet exp "chai expect property" b
expect($1).to${2:.eventually}${3:.not}.have${4:.deep}.property('$5'${6:, $7});$0
endsnippet

snippet exi "chai expect instance" w
expect($1).to${2:.eventually}${3:.not}.be.an.instanceof($4);$0
endsnippet

snippet exd "chai-dom expectation" b
expect($1${2:.querySelector${3:All}('$4')}).to${5:.not}.${6:exist};$0
endsnippet
